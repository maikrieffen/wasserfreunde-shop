import React, { useState } from 'react';
import { ShoppingCart, Package, Menu } from 'lucide-react';

const Shop = () => {
  const [products] = useState([
    { 
      id: 1, 
      name: 'Arena Powerskin ST', 
      price: 299.99, 
      category: 'Wettkampf', 
      stock: 8,
      sizes: ['34', '36', '38', '40', '42']
    },
    { 
      id: 2, 
      name: 'Arena Badehose Classic', 
      price: 29.99, 
      category: 'Badebekleidung', 
      stock: 15,
      sizes: ['S', 'M', 'L', 'XL', 'XXL']
    },
    {
      id: 3,
      name: 'Schwimmbrille Pro',
      price: 19.99,
      category: 'Equipment',
      stock: 20,
      sizes: ['One Size']
    },
    {
      id: 4,
      name: 'Badelatschen Comfort',
      price: 24.99,
      category: 'Badebekleidung',
      stock: 25,
      sizes: ['36', '37', '38', '39', '40', '41', '42', '43', '44', '45']
    },
    {
      id: 5,
      name: 'Premium Bademantel',
      price: 49.99,
      category: 'Badebekleidung',
      stock: 12,
      sizes: ['S', 'M', 'L', 'XL']
    }
  ]);
  
  const [cart, setCart] = useState([]);
  const [showCheckout, setShowCheckout] = useState(false);
  const [categories] = useState(['Alle', 'Wettkampf', 'Badebekleidung', 'Equipment', 'Zubehör']);
  const [selectedCategory, setSelectedCategory] = useState('Alle');

  const addToCart = (product, quantity, selectedSize) => {
    const cartItem = {
      ...product,
      quantity: parseInt(quantity),
      selectedSize: selectedSize
    };
    setCart([...cart, cartItem]);
  };

  const removeFromCart = (productId) => {
    setCart(cart.filter(item => item.id !== productId));
  };

  const getTotalPrice = () => {
    return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2);
  };

  const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  const isValidGermanPhone = (phone) => /^((\+49)|0)[1-9]\d{9}$/.test(phone);

  const handleSubmitOrder = (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const phone = formData.get('phone');

    if (!isValidEmail(email)) {
      alert('Bitte geben Sie eine gültige E-Mail-Adresse ein.');
      return;
    }

    if (!isValidGermanPhone(phone)) {
      alert('Bitte geben Sie eine gültige deutsche Handynummer ein.');
      return;
    }

    const orderDetails = {
      items: cart,
      customerEmail: email,
      customerPhone: phone,
      totalPrice: getTotalPrice()
    };
    
    console.log('Bestellung aufgegeben:', orderDetails);
    alert('Ihre Anfrage wurde erfolgreich gesendet! Sie erhalten eine Bestätigung, sobald die Artikel zur Abholung bereit sind.');
    setCart([]);
    setShowCheckout(false);
  };

  return (
    <div className="mx-auto px-4 py-8 max-w-[1200px]">
      {/* Header und andere Elemente bleiben gleich */}
      <header className="flex justify-between items-center mb-8 px-4">
        <a href="/" className="text-2xl font-bold flex items-center">
          <img src="/api/placeholder/40/40" alt="Logo" className="mr-2" />
          Mein Shop
        </a>
        <button 
          className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg"
          onClick={() => setShowCheckout(cart.length > 0)}
        >
          <ShoppingCart size={20} />
          <span>{cart.length} Artikel</span>
        </button>
      </header>

      <div className="mb-8 px-4">
        <div className="inline-block border rounded-lg p-4 bg-white">
          <div className="flex flex-col gap-4">
            <div className="flex items-start gap-4">
              <div className="p-2 bg-blue-100 rounded-lg flex-shrink-0">
                <Package size={24} className="text-blue-500" />
              </div>
              <p className="text-gray-600">
                Nach Ihrer Anfrage melden wir uns bei Ihnen und Sie können die Artikel im Physio-Büro der Wasserfreunden Spandau 04 abholen.
              </p>
            </div>
            <a 
              href="https://www.google.com/maps/search/Wasserfreunde+Spandau+04" 
              target="_blank" 
              rel="noopener noreferrer"
              className="bg-gray-100 hover:bg-gray-200 text-gray-600 py-2 px-6 rounded-lg text-sm w-fit"
            >
              Standort anzeigen
            </a>
          </div>
        </div>
      </div>

      {!showCheckout && (
        <div className="mb-8 px-4">
          <div className="relative inline-block">
            <Menu size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
            <select 
              className="p-2 pl-10 pr-12 border rounded-lg appearance-none"
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              style={{ backgroundImage: `url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e")`, backgroundPosition: 'right 12px center', backgroundRepeat: 'no-repeat' }}
            >
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>
      )}

      {!showCheckout ? (
        <div className="grid grid-cols-2 gap-6 px-4">
          {products
            .filter(product => selectedCategory === 'Alle' || product.category === selectedCategory)
            .map(product => (
              <div key={product.id} className="border rounded-lg p-4 bg-white">
                {/* Hauptframe mit Bild und Infos */}
                <div className="flex gap-4 mb-6">
                  {/* Bildframe */}
                  <div className="w-40 flex-shrink-0">
                    <img 
                      src="/api/placeholder/160/160" 
                      alt={product.name}
                      className="w-full aspect-square object-cover rounded-lg"
                    />
                  </div>
                  
                  {/* Infoframe */}
                  <div className="flex-1 min-w-0">
                    <h3 className="text-lg font-semibold truncate">{product.name}</h3>
                    <p className="text-gray-600 mb-2">{product.category}</p>
                    <p className="text-xl font-bold mb-4">{product.price.toFixed(2)} €</p>
                    
                    {/* Auswahlfelder */}
                    <div className="flex gap-2">
                      <select 
                        className="flex-1 text-sm p-1.5 border rounded-lg"
                        defaultValue={product.sizes[0]}
                        id={`size-${product.id}`}
                      >
                        {product.sizes.map(size => (
                          <option key={size} value={size}>{size}</option>
                        ))}
                      </select>
                      <input
                        type="number"
                        min="1"
                        max={product.stock}
                        defaultValue="1"
                        className="w-20 text-sm p-1.5 border rounded-lg"
                        id={`quantity-${product.id}`}
                      />
                    </div>
                  </div>
                </div>
                
                {/* Checkout Button mit Abstand */}
                <button
                  className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg text-center"
                  onClick={() => {
                    const quantity = document.getElementById(`quantity-${product.id}`).value;
                    const selectedSize = document.getElementById(`size-${product.id}`).value;
                    addToCart(product, quantity, selectedSize);
                  }}
                  disabled={product.stock === 0}
                >
                  In den Warenkorb
                </button>
              </div>
            ))}
        </div>
      ) : (
        /* Checkout-Formular bleibt unverändert */
        <div className="max-w-md mx-auto px-4">
          <h2 className="text-xl font-bold mb-4">Artikel anfragen</h2>
          <div className="mb-6 p-4 bg-gray-50 rounded-lg">
            <h3 className="font-semibold mb-2">Warenkorb</h3>
            {cart.map(item => (
              <div key={item.id} className="flex justify-between items-center mb-2">
                <div>
                  <span>{item.name}</span>
                  <div className="text-sm text-gray-500">
                    {item.selectedSize} - {item.quantity}x
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <span>{(item.price * item.quantity).toFixed(2)} €</span>
                  <button 
                    className="text-red-500"
                    onClick={() => removeFromCart(item.id)}
                  >
                    ×
                  </button>
                </div>
              </div>
            ))}
            <div className="mt-4 pt-4 border-t">
              <div className="flex justify-between font-bold">
                <span>Gesamt:</span>
                <span>{getTotalPrice()} €</span>
              </div>
            </div>
          </div>
          
          <form onSubmit={handleSubmitOrder} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">E-Mail</label>
              <input
                type="email"
                name="email"
                required
                className="w-full p-2 border rounded-lg"
                placeholder="ihre@email.de"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Handynummer</label>
              <input
                type="tel"
                name="phone"
                required
                className="w-full p-2 border rounded-lg"
                placeholder="+49 123 4567890"
              />
            </div>
            <div className="flex gap-4">
              <button
                type="button"
                className="flex-1 py-2 px-4 border rounded-lg"
                onClick={() => setShowCheckout(false)}
              >
                Zurück
              </button>
              <button
                type="submit"
                className="flex-1 bg-blue-500 text-white py-2 px-4 rounded-lg"
              >
                Artikel anfragen
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
};

export default Shop;
